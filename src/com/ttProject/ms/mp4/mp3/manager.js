goog.provide("com.ttProject.ms.mp4.mp3.Manager");

goog.require("com.ttProject.frame.mp3.type.Frame");
goog.require("com.ttProject.util.HexUtil");

/**
 * @constructor
 */
com.ttProject.ms.mp4.mp3.Manager = function(mediaSource) {
	this._mediaSource = mediaSource;
	this._headerSended = false;
	this._frames = [];
	this._sequenceNum = 1;
};

/**
 * frameを追記する。
 * @param frame
 */
com.ttProject.ms.mp4.mp3.Manager.prototype.appendFrame = function(frame) {
	if(!(frame instanceof com.ttProject.frame.mp3.type.Frame)) {
		// mp3の実体フレームでなければ放置しておく。
		return;
	}
	// 初アクセスの場合はmp4のheader部を追記する(1フレーム目をみないと情報が決定しないので、こちらで対処する。)
	if(!this._headerSended) {
		console.log("startHeaderをつくってみる。 for 音声");
		// mp3のframeから情報を引き出しつつheader部ftypやmoovとかの書き込みを実施する。
		/*
		 * きちんと動作したheader + moofのサンプル
		000000106674797069736F6D00000200
		000002316D6F6F760000006C6D766864000000000000000000000000000003E8
		0000000000010000010000000000000000000000000100000000000000000000
		0000000000010000000000000000000000000000400000000000000000000000
		0000000000000000000000000000000000000002000000286D76657800000020
		7472657800000000000000010000000100000480000000000000000000000195
		7472616B0000005C746B68640000000F00000000CF72D9C60000000100000000
		0000000000000000000000000000000101000000000100000000000000000000
		0000000000010000000000000000000000000000400000000000000000000000
		000001316D646961000000206D6468640000000000000000000000000000AC44
		0000000055C400000000002A68646C720000000000000000736F756E00000000
		0000000000000000747450726F6A65637400000000DF6D696E6600000010736D
		686400000000000000000000002464696E660000001C64726566000000000000
		00010000000C75726C2000000001000000A37374626C00000057737473640000
		000000000001000000472E6D7033000000000000000100000000000000000002
		001000000000AC4400000000002365736473000000000315000100040D6B1500
		00000000FA000000000006010200000010737474730000000000000000000000
		10737473630000000000000000000000147374737A0000000000000000000000
		00000000107374636F0000000000000000

		000000F46D6F6F66000000106D6668
		640000000000000001000000DC747261660000001C7466686400000021000000
		0100000000000003550200000000000010746664740000000000000000000000
		A87472756E0000020000000026000000D0000000D1000000D1000000D1000000
		D1000000D1000000D1000000D1000000D1000000D1000000D1000000D1000000
		D1000000D1000000D1000000D1000000D1000000D1000000D1000000D1000000
		D1000000D1000000D1000000D1000000D1000000D1000000D1000000D1000000
		D1000000D1000000D1000000D1000000D1000000D1000000D1000000D1000000
		D1000000D1
		 */
		/*
		ftyp
		000000106674797069736F6D00000200
		moovここから
		000002316D6F6F760000006C6D766864000000000000000000000000000003E8
		0000000000010000010000000000000000000000000100000000000000000000
		0000000000010000000000000000000000000000400000000000000000000000
		0000000000000000000000000000000000000002000000286D76657800000020
		74726578000000000000000100000001000004800000000000000000
		trakここから
		000001957472616B0000005C746B68640000000F00000000000000000000000100000000
		0000000000000000000000000000000101000000000100000000000000000000
		0000000000010000000000000000000000000000400000000000000000000000
		mdiaここから
		000001316D646961000000206D646864000000000000000000000000[0000AC44] ←この部分timescaleの値(44100) 
		0000000055C400000000002A68646C720000000000000000736F756E00000000
		0000000000000000747450726F6A65637400
		minfここから
		000000DF6D696E6600000010736D
		686400000000000000000000002464696E660000001C64726566000000000000
		00010000000C75726C2000000001
		stblここから
		000000A37374626C
		stsdここから
		00000057737473640000
		000000000001
		.mp3ここから
		000000472E6D703300000000000000010000000000000000[0002] ←channel
		001000000000[AC440000]←周波数上位2バイトが整数値
		0000002365736473000000000315000100040D6B1500 ←esdsとかあるけど、このままでよさそう。(bitrateの指定が微妙にあるけど、とりあえず無視)
		00000000FA000000000006010200000010737474730000000000000000000000
		10737473630000000000000000000000147374737A0000000000000000000000
		00000000107374636F0000000000000000
		 */
		var timebase = frame.getTimebase();
		var sampleRate = frame.getSampleRate();
		var channels = frame.getChannels();
		// データをつくって必要な情報で上書きしておく。
		var base
		var data = com.ttProject.util.HexUtil.makeBuffer(base);
		var header = new Uint8Array(0x241);
		// 基本データ設定
		header.set(data);
		// 各atomの追加データをいれておく。
		var dataView = new DataView(header.buffer);
		dataView.setUint32(0x12C, timebase);
		dataView.setUint16(0x1CE, channels);
		dataView.setUint16(0x1D6, sampleRate);
		// このheaderの値がsourceBufferに投入すべき初データとなる。
		var codecs = "mp3";
		this._sourceBuffer = this._mediaSource["addSourceBuffer"]('audio/mp3; codecs="' + codecs + '"');
		this._sourceBuffer["appendBuffer"](header);
		this._headerSended = true;
		window.ttHeader = header;
		window.ms = this._mediaSource;
		// headerの準備おわり。
	}
	// その後ある程度frameがそろったらmp4のbody部を追記しておきたい。
	if(this._frames.length > 10) { // とりあえず10フレームごとにmoofにしておきたい。
		this._frames = []; // クリアしておく。
	}
	this._frames.push(frame);
};
